_____________________________________________________________________________________________________________

@ ALOE INFO: flexnets.upc.edu


@ Linux usefull commands
1) General. 
	ls
	ls -al
	cd ..
	cd /folder
	mkdir foldername
	rm -r foldername
	cp file1 file2
	diff file1 file2
	ps -ef 
	sudo (talk about priorities)
	grep -r "char_sequence" * (or the wished file or folder)
	chown ubuntu.ubuntu
	chmod a+rwx modulename
	sudo apt-get update

2) Check if a process is active
	pgrep -x process_name

	sudo kill -9 pid 
   	sudo pkill -9 procesname	

3)	Edition 
	gedit

_____________________________________________________________________________________________________________
@ Install ALOE UBUNTU 14.04 64 bits
// Comment the line where have "HAVE_UHD" at file modules/dac_tx/src/dac_tx.c

//First update
sudo apt-get install update

//Second upgrade (10 minutes)
sudo apt-get upgrade 

//Install
sudo apt-get install build-essential libncursesw5-dev

//Install g++
sudo apt-get install g++

//Install automake
sudo apt-get install automake

//Install gawk
sudo apt-get install gawk


//Instal

// Configure kernel to allow messages buffers of 209715200 bytes
Add line: 'kernel.msgmnb=209715200' to /etc/sysctl.conf 
Add line: 'kernel.msgmax=10485760' to /etc/sysctl.conf 
pwd

and run 'sysctl -p' as root

Install required libraries
Library boost
Install via Synaptic: libboost-all-dev and libboost-dev or do sudo apt-get install libboost-all-dev
Library readline
Install from command line: sudo apt-get install libreadline6 libreadline6-dev
Library fftw3
Install library "fftw3": sudo apt-get install fftw3-dev pkg-config

Install gnuplot-qt
sudo apt-get install gnuplot-qt rlwrap

//Execute Automake Tools
autoconf

// Configure Makefiles
./configure LIBS='-lm -lpthread -lboost_system'

//If not, execute
autoconf
./configure LIBS='-lm -lpthread -lboost_system'
and check again

When "configure" success do:

make (to compile ALOE)

sudo make install (to install ALOE)


_____________________________________________________________________________________________________________
@ Describe Module folder and files



_____________________________________________________________________________________________________________
@ Create New Modules
cd ALOE_folder
cd scripts
./create_moduleALOE1.6.sh new_module_name

//Update ALOE configure 
cd .. 
scripts/update_modules.pl

//Update Automake Tools
./configure LIBS='-lpthread -lboost_system'

//Check that the new module has been added looking for the following line from output of configure command
config.status: creating modules/YOUR_MODULE_NAME/lnx_make/Makefile

//If not, execute
autoconf
./configure LIBS='-lpthread -lboost_system'
and check againmake

_____________________________________________________________________________________________________________
@ Setup Real-Time



_____________________________________________________________________________________________________________
@ Debugging Tools: 

1) Valgrind: Finding Memory Leaks
valgrind --tool=memcheck program_name

Check other Valgrind tools at: http://www.cprogramming.com/debugging/valgrind.html
_____________________________________________________________________________________________________________
@ Show Standalone debugging 
Working folder: modulename/debug_make

# Compilation: 
1) Open a terminal and go to modulename/debug_make/ folder.
2) Execute "make" command.
3) Execute compiled program: "./modulename list_of_options


"./modulename -h" to see the execution options 
printf("o STANDALONE EXECUTION ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n");
		printf("o Two alternatives: a)Autogenerated input data, b)Load input file.                   o\n");
		printf("o Options: -p:  plot input/output                                                    o\n");
		printf("o          -it: input text file according module input data type format.             o\n");
		printf("o          -ib: input binari file according module input data type format.           o\n");
		printf("o          -ot: output text file according module output data type format.           o\n");
		printf("o          -ob: output binari data file according module output data type format.    o\n");
		printf("o          block_length=XX: Number of samples sent to input each time slot           o\n");
		printf("o          run_times=XX: Number of time slot executed                                o\n");
		printf("o          plot_mode=XX: plotting options                                            o\n");
		printf("o Autogenerated input data example:                                                  o\n");
		printf("o     ./module_name -p block_length=10 run_times=2                                   o\n");
		printf("o Load input data example:                                                           o\n");
		printf("o     ./module_name -p -ib ../../../LTEcaptures/aloe.dat block_length=10 run_times=1 o\n");
		printf("o Plotting Options  (XX=IN or XX=OUT)                                                o\n");
		printf("o          plot_modeXX=C1WLS: Real-Imaginary, 1 Window, Linear, Single frame         o\n");
		printf("o          plot_modeXX=C2WLS: Real + Imaginary (2 Windows); Linear, Single frame.    o\n");
		printf("o          plot_modeXX=CFFTMF: Complex, FFT, Multiple Frames.                        o\n");
		printf("o          plot_modeXX=CFFTSF: Complex, FFT, Magnitude & Argument, Single Frame.     o\n");
		printf("o          plot_modeXX=CCSF: Complex, Constellation. Single Frame.                   o\n");
		printf("o          plot_modeXX=DEFAULT: User defined at src/graph_mode.h                     o\n");
		printf("o Plot example with autogenerated data:                                              o\n");
		printf("o     ./module_name -p block_length=10 run_times=2 plot_mode=CFFTSF                  o\n");
		printf("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n");



5) Examples: data_source module scripts
    a) data_source_C1WLS.sh
   	b) data_source_C2WLS.sh
	c) data_source_CCSF.sh
	d) data_source_CFFTMF.sh
	e) data_source_CFFTSF.sh
	
	To execute one of them put the command "./data_source_C1WLS.sh"

_____________________________________________________________________________________________________________
@ Create new waveforms

_____________________________________________________________________________________________________________
@ Waveform.Modules parameters

_____________________________________________________________________________________________________________
@ Global Execution: Waveforms
1) Check no zombi process: pgrep -x runcf (name of the process) and sudo pkill -9 runcf (if needed)
2) sudo make install (put everything at the right place)
3) runcf -f (Cleaning resources associated to lock: /tmp/phdefault.lock. Force deletetion of previous session) 
4) runcf -h (shows the options)

Usage!!!
	runcf -r [repository_path] -c [platform_cfg_file] -i [xitf_cfg_file] --debug -v [--daemon] [-o output_log]
	 -r [repository_path]: Path for file resources (for manager daemons)
	 -c [platform_config_file]: Platform configuration file
	 -f Force deletetion of previous session
	 --daemon: Run as a daemon. You should select log file for each daemon in platform config file.
	 -o [output_log]: Redirect hwapi stdout to a file, useful when running as daemon.
	 -t [num_processors] number_of_mac_operations: Run number_of_mac_operations and compute MACPS performance.
	 --valgrind: Enable valgrind (setup at scheduling config file).
	 --debug: Run in debug mode.
	 --trace: Print timing info to kernel trace.
	 -v: Run in verbose mode.

List of options!!!
	help		Display this text.
	load		Load application.	Usage: load app_name.
	run			Run application.	Usage: run app_name q-factor.
	init		Init application.	Usage: init app_name.
	pause		Pause application.	Usage: pause app_name.
	step		Step application.	Usage: step app_name.
	stop		Stop application.	Usage: stop app_name.
	statlist	List statistics.	Usage: statlist app_name [obj_name].
	statset		Modify statistic.	Usage: statset app_name obj_name stat_name new_value.
	statget		Get a statistic value.	Usage: statget app_name obj_name stat_name.
	statreport	Start/stop report.	Usage: statreport start/stop app_name obj_name stat_name window_len period.
	applist		List applications.	Usage: applist.
	pelist		List PE in platform.	Usage: pelist.
	execreport	Start/Stop EXEC reps. 	Usage: execreport app_name start/stop.
	execlog		Start/Stop EXEC logs. 	Usage: execlog app_name start/stop.
	execinfo	Exec information. 	Usage execinfo app_name [obj_name].
	exit		Exit this program.

Previous 4 command available in script: ./runcf_start.sh
Run ./stop_runcf.sh if you need to clean the runcf stop.

5) After execute runcf
Wait until:
O__SOUND CARD PROPERLY INITIALLIZED___________________________________________________________________ 
O  NsamplesIn=1024, NsamplesOut=1024                                                                  O 
O  DAC buffer size = 1024, DAC sample rate: 48000                                                     O 
O  WARNING; Required TimeSlot=21333 (us). Please, setup accordingly at hw_api/lnx/cfg/platform.conf   O 
O__SOUND CARD PROPERLY INITIALLIZED___________________________________________________________________O 

Then proceed with:
5.1) load appname
5.2) init appname
5.3) run appname
ctrl-C to exit


6) Executing a complex waveform: ofdm128.app
	runcf 
	load ofdm128
	init ofdm128
	run ofdm128

	execinfo ofdm128


7) Plotting Generated Signal: Waveform "source_plot.app"
runcf
load source_plot
init source_plot
run source_plot


8) Transmiting/Receiving Signal
8.1) Test the transmitter. soundcard_TXV0.app 
8.2) Test transmitter and Receviver: souncard_TXRXV0.app
8.3) Test minimum TX chain: souncard_testV1.app
	 data_source->dac_TXRX. Sent a tone. We can modify tone via changing parameters in statman/souncard_testV1/data_source.params
8.4) Test minimum RX chain: soundRX_plot.app
	 dac_RXTX->sink_plot


_____________________________________________________________________________________________________________
@ Introduce JACK
Look at INSTALL_JACK_SERVER.txt document in JACK_UTILS folder

_____________________________________________________________________________________________________________
@ Speakers 1W
_____________________________________________________________________________________________________________
@ Octave


_____________________________________________________________________________________________________________
@ Eclipse
To incorporate a module into ECLIPSE environment follow:

File->Import->General: Existing Projects into Workspace -> Browse-> ALOE_folder/modules/modulename/ -> Finish


_____________________________________________________________________________________________________________
@ NOVA EXECUCIO
En el directori de l'app que vulgueu APPs/TOPIC/appname/runcf -c platform.conf
load appname
init appname
run appname









