_____________________________________________________________________________________________________________

___________________________
@ Install ALOE UBUNTU 14.04 64 bits
//Update Automake Tools
automake
autoconf

// Configure Makefiles
./configure LIBS='-lpthread -lboost_system'

//If not, execute
autoconf
./configure LIBS='-lpthread -lboost_system'
and check again

When "configure" success do:

make (to compile ALOE)

sudo make install (to install ALOE)


An alternative way to perform all these steps is to execute the script configureALL.sh by typing in the ALOE folder:
./configureALL.sh


_____________________________________________________________________________________________________________
@ Describe Module folder and files



_____________________________________________________________________________________________________________
@ Create New Modules
Basically copies the content of the module module_template in the folder of the new module created.
Please, follow these steps:


cd ALOE_folder
cd scripts
./create_module_templateSK15.sh new_module_name			//VIGILA HE CANVIAT L'SCRIPT. EL NOU MODUL DE REFERENCIA ES "module_template3"

//Update ALOE configure 
cd .. 
scripts/update_modules.pl

//Update Automake Tools
./configure LIBS='-lpthread -lboost_system'

//Check that the new module has been added looking for the following line from output of configure command
config.status: creating modules/YOUR_MODULE_NAME/lnx_make/Makefile

//If not, execute
autoconf
./configure LIBS='-lpthread -lboost_system'
and check again

_____________________________________________________________________________________________________________
@ Setup Real-Time

_____________________________________________________________________________________________________________
@ Module folders

All modules are located under /modules folder. The module folder estructure is the following:

/modules/moduleName
					/test				@ Where to define the test for the module debugging
					/lnx_make			@ Compilation Folder
					/matlab			
					/src				@ Source files
					/params				@ Folder containing a copy of module.params configuration file


You must work only under /src folder for each specific module. 

_____________________________________________________________________________________________________________
@ Show Standalone debugging 
Working folder: modulename/debug_make

# Compilation: 
1) Open a terminal and go to modulename/debug_make/ folder.
2) Execute "make" command.
3) Execute compiled program: "./modulename list_of_options


"./modulename -h" to see the execution options 
printf("o STANDALONE EXECUTION ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n");
		printf("o Two alternatives: a)Autogenerated input data, b)Load input file.                   o\n");
		printf("o Options: -p:  plot input/output                                                    o\n");
		printf("o          -it: input text file according module input data type format.             o\n");
		printf("o          -ib: input binari file according module input data type format.           o\n");
		printf("o          -ot: output text file according module output data type format.           o\n");
		printf("o          -ob: output binari data file according module output data type format.    o\n");
		printf("o          block_length=XX: Number of samples sent to input each time slot           o\n");
		printf("o          run_times=XX: Number of time slot executed                                o\n");
		printf("o          plot_mode=XX: plotting options                                            o\n");
		printf("o Autogenerated input data example:                                                  o\n");
		printf("o     ./module_name -p block_length=10 run_times=2                                   o\n");
		printf("o Load input data example:                                                           o\n");
		printf("o     ./module_name -p -ib ../../../LTEcaptures/aloe.dat block_length=10 run_times=1 o\n");
		printf("o Plotting Options  (XX=IN or XX=OUT)                                                o\n");
		printf("o          plot_modeXX=C1WLS: Real-Imaginary, 1 Window, Linear, Single frame         o\n");
		printf("o          plot_modeXX=C2WLS: Real + Imaginary (2 Windows); Linear, Single frame.    o\n");
		printf("o          plot_modeXX=CFFTMF: Complex, FFT, Multiple Frames.                        o\n");
		printf("o          plot_modeXX=CFFTSF: Complex, FFT, Magnitude & Argument, Single Frame.     o\n");
		printf("o          plot_modeXX=CCSF: Complex, Constellation. Single Frame.                   o\n");
		printf("o          plot_modeXX=DEFAULT: User defined at src/graph_mode.h                     o\n");
		printf("o Plot example with autogenerated data:                                              o\n");
		printf("o     ./module_name -p block_length=10 run_times=2 plot_mode=CFFTSF                  o\n");
		printf("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n");



5) Examples: data_source module scripts
    a) data_source_C1WLS.sh
   	b) data_source_C2WLS.sh
	c) data_source_CCSF.sh
	d) data_source_CFFTMF.sh
	e) data_source_CFFTSF.sh
	
	To execute one of them put the command "./data_source_C1WLS.sh"

_____________________________________________________________________________________________________________

_____________________________________________________________________________________________________________
@ Global Execution: Waveforms

1) Check no zombi process: pgrep -x runcf (name of the process) and sudo pkill -9 runcf (if needed)
2) sudo make install (put everything at the right place)
3) runcf -f (Cleaning resources associated to lock: /tmp/phdefault.lock. Force deletetion of previous session) 
4) runcf -h (shows the options)


To execute an app follow next steps:
1) Go to app folder: cd /APPs/CLASSTools/appname/ 
2) Execute runcf -c platformName.conf

··············································································
The generic usage is as follow:

New Usage!!!
	runcf -c [platform_cfg_file] --debug -v [--daemon] [-o output_log]
	 -c [platform_config_file]: Platform configuration file. 
				Define also the scheduling and interfacing files. Typically "shceduling.conf" and "xitf.conf" 
	 -f Force deletetion of previous session
	 --daemon: Run as a daemon. You should select log file for each daemon in platform config file.
	 -o [output_log]: Redirect hwapi stdout to a file, useful when running as daemon.
	 -t [num_processors] number_of_mac_operations: Run number_of_mac_operations and compute MACPS performance.
	 --valgrind: Enable valgrind (setup at scheduling config file).
	 --debug: Run in debug mode.
	 --trace: Print timing info to kernel trace.
	 -v: Run in verbose mode.
..............................................................................

The following text should appear.

linux; GNU C++ version 4.8.2; Boost_105700; UHD_003.008.003-137-g2f760ac0

O============================================================================================O
Initiate Parsing of Platform Config Files
Platform_file(): platformJACK.conf
Scheduling_file(): scheduling.conf
Interfacing_file(): xitf.conf
O============================================================================================O
KERNEL:	Using working path: /
KERNEL:	Local Computing Capacity: 280.0 MOP/s 2 cores
KERNEL:	Internal Bandwidth: 100000.0 MBps
Configure DAC
KERNEL:	Time slot duration set to 21333 usec
SOUND_CARD_TX: outputFreq=48000.0
SOUND_CARD_TX: outputRFFreq=0.0
SOUND_CARD_TX: NsamplesOut=1024
SOUND_CARD_TX: tx_gain=1.0
SOUND_CARD_TX: tx_bw=24000.0
SOUND_CARD_RX: inputFreq=48000.0
SOUND_CARD_RX: inputRFFreq=0.0
SOUND_CARD_RX: NsamplesIn=1024
SOUND_CARD_RX: rx_gain=1.0
SOUND_CARD_RX: rx_bw=24000.0
SNDCARD_INIT
SYNCMS:	Init ok
F-END:	I'm a local master.
F-END:	Init ok
HWMAN:	Init ok
SWMAN:	Init ok
EXEC:	Init ok

O__SOUND CARD PROPERLY INITIALLIZED___________________________________________________________________ 
O  NsamplesIn=1024, NsamplesOut=1024                                                                  O 
O  DAC buffer size = 1024, DAC sample rate: 48000                                                     O 
O  WARNING; Required TimeSlot=21333 (us). Please, setup accordingly at hw_api/lnx/cfg/platform.conf   O 
O__SOUND CARD PROPERLY INITIALLIZED___________________________________________________________________O 
BRIDGE:	External input itf 0x80 configured fd 5.
BRIDGE:	Init ok
STATS:	Init ok
STMAN:	Init ok
SWLOAD:	Init ok


======================================
-= ALOE Command Manager =-
======================================


Enter Commands.
Type 'help' for available commands.

runph$: HWMAN:	Add processor: 
	New CPU: PE 0x2, 5.973 MOPTS, BW 2133.3 MBPTS, 2 cores, TS=21333 us
	-- Available computing resources (C vector in KOPTS) --
	5973		5973		

runph$: 


If not, please, press return key.

It is important to verify that "__SOUND CARD PROPERLY INITIALLIZED" has been appeared, otherwise 
audio board can not be used.


Several scripts would help to simplfy the starting, stopping, compiling and system cleaning process.
In APPs/CLASSTools/appname/ folder execute:

./runcf_start.sh		: Executes the appname app in normal priority.
./runcf_startRT.sh		: Executes the appname app in root priority (High priority). 
./stop_runcf.sh			: Stops and cleans the previous execution.
./make_installALL.sh	: Compiles averything.
./make_installNEW.sh	: Compiles only last changes.

After each execution it is recommended to make a ./stop_runcf.sh 



3) On prompt (runph$) put "help"
runph$: help

The following text should appear showing the list of available options:

List of options!!!
	help		Display this text.
	load		Load application.	Usage: load app_name.
	run			Run application.	Usage: run app_name q-factor.
	init		Init application.	Usage: init app_name.
	pause		Pause application.	Usage: pause app_name.
	step		Step application.	Usage: step app_name.
	stop		Stop application.	Usage: stop app_name.
	statlist	List statistics.	Usage: statlist app_name [obj_name].
	statset		Modify statistic.	Usage: statset app_name obj_name stat_name new_value.
	statget		Get a statistic value.	Usage: statget app_name obj_name stat_name.
	statreport	Start/stop report.	Usage: statreport start/stop app_name obj_name stat_name window_len period.
	applist		List applications.	Usage: applist.
	pelist		List PE in platform.	Usage: pelist.
	execreport	Start/Stop EXEC reps. 	Usage: execreport app_name start/stop.
	execlog		Start/Stop EXEC logs. 	Usage: execlog app_name start/stop.
	execinfo	Exec information. 	Usage execinfo app_name [obj_name].
	exit		Exit this program.



_____________________________________________________________________________________________________________
@ Eclipse
To incorporate a module into ECLIPSE environment follow:

File->Import->General: Existing Projects into Workspace -> Browse-> ALOE_folder/modules/modulename/ -> Finish


_____________________________________________________________________________________________________________
@ NEW EXECUTION FOR NOV15 version
Go to APP folder you wish to execute:
cd APPs/TOPIC/appname/

1) A list of APPs can be found in the folder and several folders: 
	data		@ Allocate data files 
	logs    	@ Where to save the execution logs
	reports 	@
	paramcfg	@ Where to allocate the configuration files (modulename.params) for each Object
	hwplatform	@ Containing the different platform.conf configuration files 
	
And files:
	App_name.app				@ Description of APP
	make_installALL.sh			@ To perform a FULL compilation/instalation from here
	make_installNEW.sh			@ To perform a PARTIAL compilation/instalation from here
	runcf_start.sh				@ To execute runcf with the proper platform.conf file
	runcf_startRT.sh			@ To execute in real-time (privileged)
	stop_runcf.sh				@ To stop runcf and clean system environment


To execute do:
runcf -c hwplatform/platform.conf		# Please. check the configuration details of platform.conf
										# You must modify the setup according your hardware needs

Or use the scripts.
Normal User
./runcf_start.sh		To execute as normal user
						In case of using JACK remember to execute jack server as normal user.
						In JACK_UTILS/SERVER folder do: ./start_jack_server.sh

Please, modify the "runcf_start.sh" script according your needs
1) Use the platform.conf file for debugging.
2) Use the platformJACK.conf file when using the audio port
3) use the platformUSRP.conf file when using an USRP device
				

Or as privileged User (real-time benefits)
./runcf_startRT.sh 		To execute as privileged user. 
						In case of using JACK remember to execute jack server as root.
						In JACK_UTILS/SERVER folder do: sudo ./start_jack_server.sh

And in the prompt:
load appname (without app extension)
init appname
run appname


and use:
./stop_runcf.sh 		To clean previous executions. 
We recommend to execute "stop_runcf.sh" after each execution.

Remember to modify the scripts according your platform.conf file and also the scripts if you modify the 
platform.conf file name.
_____________________________________________________________________________________________________________
@ APP to check shared variables
Shared variables are called "STATS". It is assumed an internal memory where all this variables can be stored.

The following refers to an APP example involving two Objects: module_templat3 and chusco2.

This APP can be found at APPs/COMPUTETools/MODULE_TEMPLATE3_TEST
To load do:

./runcf_start.sh

load MODULE_TEMPLATE_TEST2
init MODULE_TEMPLATE_TEST2
step MODULE_TEMPLATE_TEST2

You will see that the data in CHUSCO2 Object is update with the values set by MODULE_TEMPLATE3

To setup the shared variables you need to do:

1) First you need to create each STAT. The Object owning the STAT must create its shared access, must publish it.
STAT must be created during "Initialization" phase of the Object. 


	/* Create Module Public Stats */
	// Stats: Parameters that can be accessed from other modules. Each module decide the public parameters.
	// Function(): int stat_create(char *StatName, int StatType, int StatLength, int *StatValue, param_type_t StatMode)
	// This function Return the index of the Stat. This is all the information you need to access the data.
	// When created you must indicate the Stat type and the Stat Length (Size of buffer)
	// StatName: Name you give to such Stat.
	// StatType: STAT_TYPE_CHAR, STAT_TYPE_INT, STAT_TYPE_FLOAT, STAT_TYPE_STRING
	// StatMode: READ (read at beginning of Time Slot), WRITE (write at the end of TS), OFF (updated by command)
	// StatLength: Size of internal buffer in StatType length. Internally is translated to bytes.
	// StatValue: Data Pointer associated to the defined Stat

	// First Example
	INTCTRL_Idx=stat_create("INTCTRL", STAT_TYPE_INT, 1, &oStat.intctrl, OFF);
	//In previous function we setup a Stat named INTCTRL with an internal buffer of 10 Integers (40 bytes)
	CHARCTRL_Idx=stat_create("CHARCTRL", STAT_TYPE_CHAR, 1, &oStat.charctrl, OFF);

	// Second Example
	oSTAT_Idx=stat_create("oSTAT", STAT_TYPE_INT, sizeof(oStat), (char *)&oStat, OFF);
	/*In previous function we setup a Stat named MODULE_TEMPLATE3_oStat with an internal buffer defined by the size
	 * of oStat structure. We will share all the information contained in the oStat structure to any remote Object.
	 */


2) The STAT must be update at the end of the Object Work. 

	// SET STATS: At the end of the Object Work
	// First Example
	stat_set(INTCTRL_Idx, &oStat.intctrl, 1);								// We set in Stat an individual value
	stat_set(CHARCTRL_Idx, &oStat.charctrl, 1);								// We set in Stat an individual value

	// Second Example
	stat_set(oSTAT_Idx, (char *)&oStat, sizeof(oStat));	// We set in Stat the control structure of template3 Object


3)STAT Creation and Set should be performaed in the same Object. Reading/getting the shared variable value can be done at
the remote object. Nevertheless, to access to the shared variable we need to capture the STAT index (StatIdx)that define the STAT in the
internal memory. This must be done only one time and at the first time slot of the execution phase (run). 

	// FIRST GET THE PUBLIC STAT INDEX OF REMOTE STATS (Not belonging to current Object)
	// MUST BE DONE AT FIRST TIME SLOT AND ONLY ONE TIME. During Init phase some Stats can not be setup properly
	if(Tslot==0){
		ListPublicStats(50);				// List the number of available Stats in the system.
		// First Example
		MODULE_TEMPLATE3_INTCTRL_Idx=stat_get_idx("module_template3", "INTCTRL");
		printf("MODULE_TEMPLATE3_INTCTRL_Idx in CHUSCO2=%d\n",MODULE_TEMPLATE3_INTCTRL_Idx);
		MODULE_TEMPLATE3_CHARCTRL_Idx=stat_get_idx("module_template3", "CHARCTRL");
		printf("MODULE_TEMPLATE3_CHARCTRL_Idx in CHUSCO2=%d\n",MODULE_TEMPLATE3_CHARCTRL_Idx);


		// Second Example
		MODULE_TEMPLATE3_oStat_Idx=stat_get_idx("module_template3", "oSTAT");
		printf("MODULE_TEMPLATE3_oStat_Idx in CHUSCO2=%d\n",MODULE_TEMPLATE3_oStat_Idx);
	}


4) Then you get the StatIdx of each variable an can access directly to the allocated data by doing:

	/* READ STATS: At the beginning of Object Work */
	// First Example
	stat_get(MODULE_TEMPLATE3_INTCTRL_Idx, &TEMPLATE3_oStat.intctrl, 1);
	stat_get(MODULE_TEMPLATE3_CHARCTRL_Idx, &TEMPLATE3_oStat.charctrl, 1);
	// Print obtained values. Only for example purposes.

	// Second Example
	stat_get(MODULE_TEMPLATE3_oStat_Idx, &TEMPLATE3_oStat, sizeof(TEMPLATE3_oStat));










